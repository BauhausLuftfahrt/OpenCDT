/**
 */
package model.science.quantities.provider;

import java.util.ArrayList;
import java.util.Collection;

import model.science.quantities.util.QuantitiesAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemColorProvider;
import org.eclipse.emf.edit.provider.IItemFontProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.IItemStyledLabelProvider;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITableItemColorProvider;
import org.eclipse.emf.edit.provider.ITableItemFontProvider;
import org.eclipse.emf.edit.provider.ITableItemLabelProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class QuantitiesItemProviderAdapterFactory extends QuantitiesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
        /**
         * This keeps track of the root adapter factory that delegates to this adapter factory.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected ComposedAdapterFactory parentAdapterFactory;

        /**
         * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected IChangeNotifier changeNotifier = new ChangeNotifier();

        /**
         * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected Collection<Object> supportedTypes = new ArrayList<Object>();

        /**
         * This constructs an instance.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public QuantitiesItemProviderAdapterFactory() {
                supportedTypes.add(IEditingDomainItemProvider.class);
                supportedTypes.add(IStructuredItemContentProvider.class);
                supportedTypes.add(ITreeItemContentProvider.class);
                supportedTypes.add(IItemLabelProvider.class);
                supportedTypes.add(IItemPropertySource.class);
                supportedTypes.add(ITableItemLabelProvider.class);
                supportedTypes.add(ITableItemColorProvider.class);
                supportedTypes.add(ITableItemFontProvider.class);
                supportedTypes.add(IItemColorProvider.class);
                supportedTypes.add(IItemFontProvider.class);
                supportedTypes.add(IItemStyledLabelProvider.class);
        }

        /**
         * This keeps track of the one adapter used for all {@link model.science.quantities.Distance} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected DistanceItemProvider distanceItemProvider;

        /**
         * This creates an adapter for a {@link model.science.quantities.Distance}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createDistanceAdapter() {
                if (distanceItemProvider == null) {
                        distanceItemProvider = new DistanceItemProvider(this);
                }

                return distanceItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link model.science.quantities.Time} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected TimeItemProvider timeItemProvider;

        /**
         * This creates an adapter for a {@link model.science.quantities.Time}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createTimeAdapter() {
                if (timeItemProvider == null) {
                        timeItemProvider = new TimeItemProvider(this);
                }

                return timeItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link model.science.quantities.Velocity} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected VelocityItemProvider velocityItemProvider;

        /**
         * This creates an adapter for a {@link model.science.quantities.Velocity}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createVelocityAdapter() {
                if (velocityItemProvider == null) {
                        velocityItemProvider = new VelocityItemProvider(this);
                }

                return velocityItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link model.science.quantities.Mass} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected MassItemProvider massItemProvider;

        /**
         * This creates an adapter for a {@link model.science.quantities.Mass}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createMassAdapter() {
                if (massItemProvider == null) {
                        massItemProvider = new MassItemProvider(this);
                }

                return massItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link model.science.quantities.Force} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected ForceItemProvider forceItemProvider;

        /**
         * This creates an adapter for a {@link model.science.quantities.Force}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createForceAdapter() {
                if (forceItemProvider == null) {
                        forceItemProvider = new ForceItemProvider(this);
                }

                return forceItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link model.science.quantities.Efficiency} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected EfficiencyItemProvider efficiencyItemProvider;

        /**
         * This creates an adapter for a {@link model.science.quantities.Efficiency}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createEfficiencyAdapter() {
                if (efficiencyItemProvider == null) {
                        efficiencyItemProvider = new EfficiencyItemProvider(this);
                }

                return efficiencyItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link model.science.quantities.Energy} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected EnergyItemProvider energyItemProvider;

        /**
         * This creates an adapter for a {@link model.science.quantities.Energy}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createEnergyAdapter() {
                if (energyItemProvider == null) {
                        energyItemProvider = new EnergyItemProvider(this);
                }

                return energyItemProvider;
        }

        /**
         * This keeps track of the one adapter used for all {@link model.science.quantities.Power} instances.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        protected PowerItemProvider powerItemProvider;

        /**
         * This creates an adapter for a {@link model.science.quantities.Power}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter createPowerAdapter() {
                if (powerItemProvider == null) {
                        powerItemProvider = new PowerItemProvider(this);
                }

                return powerItemProvider;
        }

        /**
         * This returns the root adapter factory that contains this factory.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public ComposeableAdapterFactory getRootAdapterFactory() {
                return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
        }

        /**
         * This sets the composed adapter factory that contains this factory.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
                this.parentAdapterFactory = parentAdapterFactory;
        }

        /**
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public boolean isFactoryForType(Object type) {
                return supportedTypes.contains(type) || super.isFactoryForType(type);
        }

        /**
         * This implementation substitutes the factory itself as the key for the adapter.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Adapter adapt(Notifier notifier, Object type) {
                return super.adapt(notifier, this);
        }

        /**
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        @Override
        public Object adapt(Object object, Object type) {
                if (isFactoryForType(type)) {
                        Object adapter = super.adapt(object, type);
                        if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
                                return adapter;
                        }
                }

                return null;
        }

        /**
         * This adds a listener.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public void addListener(INotifyChangedListener notifyChangedListener) {
                changeNotifier.addListener(notifyChangedListener);
        }

        /**
         * This removes a listener.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public void removeListener(INotifyChangedListener notifyChangedListener) {
                changeNotifier.removeListener(notifyChangedListener);
        }

        /**
         * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public void fireNotifyChanged(Notification notification) {
                changeNotifier.fireNotifyChanged(notification);

                if (parentAdapterFactory != null) {
                        parentAdapterFactory.fireNotifyChanged(notification);
                }
        }

        /**
         * This disposes all of the item providers created by this factory. 
         * <!-- begin-user-doc -->
         * <!-- end-user-doc -->
         * @generated
         */
        public void dispose() {
                if (distanceItemProvider != null) distanceItemProvider.dispose();
                if (timeItemProvider != null) timeItemProvider.dispose();
                if (velocityItemProvider != null) velocityItemProvider.dispose();
                if (massItemProvider != null) massItemProvider.dispose();
                if (forceItemProvider != null) forceItemProvider.dispose();
                if (efficiencyItemProvider != null) efficiencyItemProvider.dispose();
                if (energyItemProvider != null) energyItemProvider.dispose();
                if (powerItemProvider != null) powerItemProvider.dispose();
        }

}
