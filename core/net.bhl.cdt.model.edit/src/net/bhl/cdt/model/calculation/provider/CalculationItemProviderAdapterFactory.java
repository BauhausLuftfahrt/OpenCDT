/*******************************************************************************
 * <copyright> Copyright (c) 2009-2012 Bauhaus Luftfahrt e.V.. All rights reserved. This program and the accompanying
 * materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html </copyright>
 ******************************************************************************/

package net.bhl.cdt.model.calculation.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.bhl.cdt.model.calculation.util.CalculationAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this
 * factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters
 * also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances. <!--
 * begin-user-doc --> <!-- end-user-doc -->
 * 
 * @generated
 */
public class CalculationItemProviderAdapterFactory extends CalculationAdapterFactory implements
	ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public CalculationItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.bhl.cdt.model.calculation.CalculationSet} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected CalculationSetItemProvider calculationSetItemProvider;

	/**
	 * This creates an adapter for a {@link net.bhl.cdt.model.calculation.CalculationSet}. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createCalculationSetAdapter() {
		if (calculationSetItemProvider == null) {
			calculationSetItemProvider = new CalculationSetItemProvider(this);
		}

		return calculationSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.bhl.cdt.model.calculation.Calculation} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected CalculationItemProvider calculationItemProvider;

	/**
	 * This creates an adapter for a {@link net.bhl.cdt.model.calculation.Calculation}. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createCalculationAdapter() {
		if (calculationItemProvider == null) {
			calculationItemProvider = new CalculationItemProvider(this);
		}

		return calculationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.bhl.cdt.model.calculation.ParameterMapping}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ParameterMappingItemProvider parameterMappingItemProvider;

	/**
	 * This creates an adapter for a {@link net.bhl.cdt.model.calculation.ParameterMapping}. <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createParameterMappingAdapter() {
		if (parameterMappingItemProvider == null) {
			parameterMappingItemProvider = new ParameterMappingItemProvider(this);
		}

		return parameterMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.bhl.cdt.model.calculation.CalculationGraph}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected CalculationGraphItemProvider calculationGraphItemProvider;

	/**
	 * This creates an adapter for a {@link net.bhl.cdt.model.calculation.CalculationGraph}. <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createCalculationGraphAdapter() {
		if (calculationGraphItemProvider == null) {
			calculationGraphItemProvider = new CalculationGraphItemProvider(this);
		}

		return calculationGraphItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.bhl.cdt.model.calculation.Node} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected NodeItemProvider nodeItemProvider;

	/**
	 * This creates an adapter for a {@link net.bhl.cdt.model.calculation.Node}. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createNodeAdapter() {
		if (nodeItemProvider == null) {
			nodeItemProvider = new NodeItemProvider(this);
		}

		return nodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.bhl.cdt.model.calculation.Condition} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ConditionItemProvider conditionItemProvider;

	/**
	 * This creates an adapter for a {@link net.bhl.cdt.model.calculation.Condition}. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createConditionAdapter() {
		if (conditionItemProvider == null) {
			conditionItemProvider = new ConditionItemProvider(this);
		}

		return conditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.bhl.cdt.model.calculation.IterationNode} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected IterationNodeItemProvider iterationNodeItemProvider;

	/**
	 * This creates an adapter for a {@link net.bhl.cdt.model.calculation.IterationNode}. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createIterationNodeAdapter() {
		if (iterationNodeItemProvider == null) {
			iterationNodeItemProvider = new IterationNodeItemProvider(this);
		}

		return iterationNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.bhl.cdt.model.calculation.ConditionalNode} instances.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ConditionalNodeItemProvider conditionalNodeItemProvider;

	/**
	 * This creates an adapter for a {@link net.bhl.cdt.model.calculation.ConditionalNode}. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createConditionalNodeAdapter() {
		if (conditionalNodeItemProvider == null) {
			conditionalNodeItemProvider = new ConditionalNodeItemProvider(this);
		}

		return conditionalNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.bhl.cdt.model.calculation.StartSet} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected StartSetItemProvider startSetItemProvider;

	/**
	 * This creates an adapter for a {@link net.bhl.cdt.model.calculation.StartSet}. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createStartSetAdapter() {
		if (startSetItemProvider == null) {
			startSetItemProvider = new StartSetItemProvider(this);
		}

		return startSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances. <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ParameterDescriptorToMappableComponentInterfaceMapItemProvider parameterDescriptorToMappableComponentInterfaceMapItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createParameterDescriptorToMappableComponentInterfaceMapAdapter() {
		if (parameterDescriptorToMappableComponentInterfaceMapItemProvider == null) {
			parameterDescriptorToMappableComponentInterfaceMapItemProvider = new ParameterDescriptorToMappableComponentInterfaceMapItemProvider(
				this);
		}

		return parameterDescriptorToMappableComponentInterfaceMapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.bhl.cdt.model.calculation.CalculationSetNode}
	 * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected CalculationSetNodeItemProvider calculationSetNodeItemProvider;

	/**
	 * This creates an adapter for a {@link net.bhl.cdt.model.calculation.CalculationSetNode}. <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createCalculationSetNodeAdapter() {
		if (calculationSetNodeItemProvider == null) {
			calculationSetNodeItemProvider = new CalculationSetNodeItemProvider(this);
		}

		return calculationSetNodeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!--
	 * end-user-doc -->
	 * 
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public void dispose() {
		if (calculationSetItemProvider != null)
			calculationSetItemProvider.dispose();
		if (calculationItemProvider != null)
			calculationItemProvider.dispose();
		if (parameterMappingItemProvider != null)
			parameterMappingItemProvider.dispose();
		if (calculationGraphItemProvider != null)
			calculationGraphItemProvider.dispose();
		if (nodeItemProvider != null)
			nodeItemProvider.dispose();
		if (conditionItemProvider != null)
			conditionItemProvider.dispose();
		if (iterationNodeItemProvider != null)
			iterationNodeItemProvider.dispose();
		if (conditionalNodeItemProvider != null)
			conditionalNodeItemProvider.dispose();
		if (startSetItemProvider != null)
			startSetItemProvider.dispose();
		if (parameterDescriptorToMappableComponentInterfaceMapItemProvider != null)
			parameterDescriptorToMappableComponentInterfaceMapItemProvider.dispose();
		if (calculationSetNodeItemProvider != null)
			calculationSetNodeItemProvider.dispose();
	}

}
