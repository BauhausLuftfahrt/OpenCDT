import org.eclipse.emf.common.util.URI
import org.eclipse.emf.examples.extlibrary.Book
import org.eclipse.emf.examples.extlibrary.EXTLibraryFactory
import org.eclipse.emf.examples.extlibrary.Library
import org.eclipse.emf.examples.extlibrary.Writer
import org.eclipse.emf.parsley.examples.firstexample.FirstexampleSaveableTreeFormView
import org.eclipse.emf.parsley.edit.IEditingStrategy
import org.eclipse.emf.parsley.edit.UndoableEditingStrategy
import org.eclipse.emf.examples.extlibrary.Employee
import org.eclipse.swt.layout.GridLayout
import org.eclipse.swt.events.SelectionAdapter
import org.eclipse.swt.events.SelectionEvent
import org.eclipse.swt.events.SelectionListener
import com.google.inject.Injector
import org.eclipse.emf.parsley.examples.firstexample.AddButton

/* org.eclipse.emf.parsley.examples.firstexample EMF Parsley Dsl Module file */
module org.eclipse.emf.parsley.examples.firstexample {
	
	parts {
		viewpart org.eclipse.emf.parsley.examples.firstexample {
			viewname "My Library Tree Form"
			viewclass FirstexampleSaveableTreeFormView
		}
	}

	bindings {
		type IEditingStrategy -> UndoableEditingStrategy
		value int TreeFormSashStyle -> SWT.HORIZONTAL
	}
	
	configurator {
		resourceURI {
			FirstexampleSaveableTreeFormView -> {
				return URI.createFileURI( System.getProperty("user.home") + "/MyLibrary.library" ); 
				//return URI.createFileURI(ResourcesPlugin.getWorkspace().getRoot().getLocation().toString() + "/reference");
			}
		}
	}
	
	resourceManager {
		initializeResource {
			//it.getContents += EXTLibraryFactory.eINSTANCE.createLibrary
			
		}
	}

	featuresProvider {
        features {
            Library -> name 
            Writer ->  name, address, books, path, firstName, lastName
            Book -> author, title, category
            Employee -> manager
        }
    }
    formFeatureCaptionProvider{
			text{
				Book:author -> "Written by:"
			}
			label{
				Writer:name -> createLabel(parent, "Name")
			}
		}
	labelProvider {
	    text {
	       Book b -> { '"' + b.title + '"' }
	        Writer w -> { w.name }
	    }
	}

	menuBuilder {
		val factory = EXTLibraryFactory.eINSTANCE
		
		emfMenus {
			Writer w -> #[
				actionChange("New book", w.eContainer as Library,
					[
						library |
						val book = factory.createBook
						library.books += book
						book.title = "A new book"
						book.author = w	
					]
				),
				// in this variant undo will only unset the book's author,
				// but it will not remove the added code from the library
				// since we record changes concerning the writer only
				actionChange("New book (variant)", w,
					[
						writer |
						val library = writer.eContainer as Library
						val book = factory.createBook
						library.books += book
						book.title = "A new book"
						book.author = w
					]
				)
			]
			Book b -> #[
				actionChange("New writer", b.eContainer as Library,
					[
						library |
						val writer = factory.createWriter
						library.writers += writer
						writer.name = "A new writer"
						writer.books += b
					]
				),
				actionAdd("New book (same title)",
					(b.eContainer as Library).books,
					factory.createBook,
					[title = b.title]
				)
			]
		}
	}

	viewerContentProvider {
		elements{		
		Writer -> {
				name + lastName + firstName
			}
			
		}
		children {
			Library -> {
				writers + books + employees
			}
		}
	}	
	formControlFactory {	
   
			control {
			
			Writer : books -> 
					createLabel(
						books.map[title].join(", "))
		 
			Writer :  firstName -> { 
				//createButton(parent,"set", SWT.PUSH)
				//createButton(parent,"open", SWT.PUSH)
				toolkit.createHyperlink(parent, name, SWT.NONE)
				
				
			}
			Writer :  lastName -> { val v = toolkit.createComposite(parent, SWT.NONE)	
		
				v.setLayout(new GridLayout(3, false))

				val t = toolkit.createText(v,name, SWT.SINGLE)
				//t.setSize(100,10)
				
				//val k = new SelectionListener()
				val b = toolkit.createButton(v,"open", SWT.PUSH)
				val s = toolkit.createButton(v,"set", SWT.PUSH)
				val k  = new AddButton(b, s, name, t)
				
				//b.addSelectionListener()
				//b.getSelection()
				toolkit.createComposite(parent,SWT.NONE)
				//toolkit.createComposite(v)
				
				
				
				 //toolkit.createHyperlink(parent, name, SWT.NONE)
	
			}
			//Writer :  name -> { toolkit.setBorderStyle(SWT.BORDER)
				//toolkit.createComposite(parent) 
				
				
			//}
			
			//Writer :  name -> {toolkit.createComposite(parent)}
			Employee : manager -> {createText("", SWT.TOGGLE)}
			target observeText(SWT.Modify)
			

		}
	}
	dialogControlFactory {
			control {
				Writer :  lastName -> {createButton("set", SWT.PUSH)}
				
				}
			}
	}
		
		


