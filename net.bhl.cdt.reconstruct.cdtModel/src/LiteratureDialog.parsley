import cdtliterature.Article
import cdtliterature.Book
import cdtliterature.CdtliteratureFactory
import cdtliterature.Library
import formula.Formula
import formula.FormulaRepository
import net.bhl.cdt.reconstruct.cdtmodel.CDTLiteratureTable
import net.bhl.cdt.reconstruct.cdtmodel.CustomFormControlFactory
import net.bhl.cdt.reconstruct.cdtmodel.ReferenceDialog
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.parsley.composite.FormControlFactory
import org.eclipse.emf.parsley.edit.IEditingStrategy
import org.eclipse.emf.parsley.edit.UndoableEditingStrategy

/* net.bhl.cdt.reconstruct.cdtmodel EMF Parsley Dsl Module file */
module net.bhl.cdt.reconstruct.cdtliteraturetable {
	
	parts {
		viewpart net.bhl.cdt.reconstruct.cdtliteraturetable {
			viewname "CDTLiteratureTable"
			viewclass CDTLiteratureTable
		}
	}
	bindings{
		
		type IEditingStrategy -> UndoableEditingStrategy
		type FormControlFactory -> CustomFormControlFactory
				
	}
	configurator {
		
		val lib = CdtliteratureFactory.eINSTANCE.getCdtliteraturePackage();
		
		resourceURI {
			
				CDTLiteratureTable -> {
				return URI.createFileURI(
					System.getProperty("user.home") + "/runtime-net.bhl.cdt.client.e4.product/reference" +
						"/MyLibrary.library" );
					}
				}
				
				eClass {			
				ReferenceDialog  -> {
					return lib.getLibrary()
				
				}
			}
				
	}
	
	resourceManager {		
			initializeResource {
					// Optional: initialize an empty Resource
					// 'it' is of type Resource
					// e.g., it.getContents += myFactory.createMyClass
					it.getContents += CdtliteratureFactory.eINSTANCE.createLibrary();
				}
				saveResource {
				// it is of type org.eclipse.emf.ecore.resource.Resource
				//it.save(null)
				return true
			}
	}
	tableFeaturesProvider{
				features {
					 Library -> name
					 Article -> title, author
					 Book -> publisher, isbn
			
				}
	}
	featuresProvider {
				features {
					 Library -> name
					 Article -> title, author, year, path
					 Book -> publisher, isbn
	
				}
	}
	
	tableLabelProvider {
			text {
				Library:name -> 'Name'

			}
	}
	viewerContentProvider {
				elements{
					Library -> article + book
					Article -> title
					
				}
				children {
					FormulaRepository -> {
						Formula
					}
					Library -> {
						article + book + inbook + conference + incollection + inproceedings
							 + proceedings + techreport + phdthesis+ masterthesis + unpublished
						
					}
				}
    		}
	
}
