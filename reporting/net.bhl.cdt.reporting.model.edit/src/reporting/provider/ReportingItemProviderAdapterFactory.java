/**
 */
package reporting.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import reporting.util.ReportingAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ReportingItemProviderAdapterFactory extends ReportingAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ReportingItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link reporting.Report} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReportItemProvider reportItemProvider;

	/**
	 * This creates an adapter for a {@link reporting.Report}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReportAdapter() {
		if (reportItemProvider == null) {
			reportItemProvider = new ReportItemProvider(this);
		}

		return reportItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link reporting.ReportMap} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReportMapItemProvider reportMapItemProvider;

	/**
	 * This creates an adapter for a {@link reporting.ReportMap}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReportMapAdapter() {
		if (reportMapItemProvider == null) {
			reportMapItemProvider = new ReportMapItemProvider(this);
		}

		return reportMapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link reporting.Chart3D} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Chart3DItemProvider chart3DItemProvider;

	/**
	 * This creates an adapter for a {@link reporting.Chart3D}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChart3DAdapter() {
		if (chart3DItemProvider == null) {
			chart3DItemProvider = new Chart3DItemProvider(this);
		}

		return chart3DItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link reporting.BarChart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BarChartItemProvider barChartItemProvider;

	/**
	 * This creates an adapter for a {@link reporting.BarChart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBarChartAdapter() {
		if (barChartItemProvider == null) {
			barChartItemProvider = new BarChartItemProvider(this);
		}

		return barChartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link reporting.Axis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AxisItemProvider axisItemProvider;

	/**
	 * This creates an adapter for a {@link reporting.Axis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAxisAdapter() {
		if (axisItemProvider == null) {
			axisItemProvider = new AxisItemProvider(this);
		}

		return axisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link reporting.DateAxis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateAxisItemProvider dateAxisItemProvider;

	/**
	 * This creates an adapter for a {@link reporting.DateAxis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateAxisAdapter() {
		if (dateAxisItemProvider == null) {
			dateAxisItemProvider = new DateAxisItemProvider(this);
		}

		return dateAxisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link reporting.IntegerAxis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerAxisItemProvider integerAxisItemProvider;

	/**
	 * This creates an adapter for a {@link reporting.IntegerAxis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerAxisAdapter() {
		if (integerAxisItemProvider == null) {
			integerAxisItemProvider = new IntegerAxisItemProvider(this);
		}

		return integerAxisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link reporting.FontPropertyElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FontPropertyElementItemProvider fontPropertyElementItemProvider;

	/**
	 * This creates an adapter for a {@link reporting.FontPropertyElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFontPropertyElementAdapter() {
		if (fontPropertyElementItemProvider == null) {
			fontPropertyElementItemProvider = new FontPropertyElementItemProvider(this);
		}

		return fontPropertyElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link reporting.Label} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LabelItemProvider labelItemProvider;

	/**
	 * This creates an adapter for a {@link reporting.Label}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLabelAdapter() {
		if (labelItemProvider == null) {
			labelItemProvider = new LabelItemProvider(this);
		}

		return labelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link reporting.GanttChart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GanttChartItemProvider ganttChartItemProvider;

	/**
	 * This creates an adapter for a {@link reporting.GanttChart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGanttChartAdapter() {
		if (ganttChartItemProvider == null) {
			ganttChartItemProvider = new GanttChartItemProvider(this);
		}

		return ganttChartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link reporting.DataField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataFieldItemProvider dataFieldItemProvider;

	/**
	 * This creates an adapter for a {@link reporting.DataField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataFieldAdapter() {
		if (dataFieldItemProvider == null) {
			dataFieldItemProvider = new DataFieldItemProvider(this);
		}

		return dataFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link reporting.DataSourceDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataSourceDefinitionItemProvider dataSourceDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link reporting.DataSourceDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataSourceDefinitionAdapter() {
		if (dataSourceDefinitionItemProvider == null) {
			dataSourceDefinitionItemProvider = new DataSourceDefinitionItemProvider(this);
		}

		return dataSourceDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link reporting.DataSource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataSourceItemProvider dataSourceItemProvider;

	/**
	 * This creates an adapter for a {@link reporting.DataSource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataSourceAdapter() {
		if (dataSourceItemProvider == null) {
			dataSourceItemProvider = new DataSourceItemProvider(this);
		}

		return dataSourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link reporting.DataSourceFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataSourceFilterItemProvider dataSourceFilterItemProvider;

	/**
	 * This creates an adapter for a {@link reporting.DataSourceFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataSourceFilterAdapter() {
		if (dataSourceFilterItemProvider == null) {
			dataSourceFilterItemProvider = new DataSourceFilterItemProvider(this);
		}

		return dataSourceFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link reporting.DataSourceGrouping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataSourceGroupingItemProvider dataSourceGroupingItemProvider;

	/**
	 * This creates an adapter for a {@link reporting.DataSourceGrouping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataSourceGroupingAdapter() {
		if (dataSourceGroupingItemProvider == null) {
			dataSourceGroupingItemProvider = new DataSourceGroupingItemProvider(this);
		}

		return dataSourceGroupingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link reporting.BubbleChart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BubbleChartItemProvider bubbleChartItemProvider;

	/**
	 * This creates an adapter for a {@link reporting.BubbleChart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBubbleChartAdapter() {
		if (bubbleChartItemProvider == null) {
			bubbleChartItemProvider = new BubbleChartItemProvider(this);
		}

		return bubbleChartItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (reportItemProvider != null) reportItemProvider.dispose();
		if (reportMapItemProvider != null) reportMapItemProvider.dispose();
		if (chart3DItemProvider != null) chart3DItemProvider.dispose();
		if (barChartItemProvider != null) barChartItemProvider.dispose();
		if (axisItemProvider != null) axisItemProvider.dispose();
		if (dateAxisItemProvider != null) dateAxisItemProvider.dispose();
		if (integerAxisItemProvider != null) integerAxisItemProvider.dispose();
		if (fontPropertyElementItemProvider != null) fontPropertyElementItemProvider.dispose();
		if (labelItemProvider != null) labelItemProvider.dispose();
		if (ganttChartItemProvider != null) ganttChartItemProvider.dispose();
		if (dataFieldItemProvider != null) dataFieldItemProvider.dispose();
		if (dataSourceDefinitionItemProvider != null) dataSourceDefinitionItemProvider.dispose();
		if (dataSourceItemProvider != null) dataSourceItemProvider.dispose();
		if (dataSourceFilterItemProvider != null) dataSourceFilterItemProvider.dispose();
		if (dataSourceGroupingItemProvider != null) dataSourceGroupingItemProvider.dispose();
		if (bubbleChartItemProvider != null) bubbleChartItemProvider.dispose();
	}

}
